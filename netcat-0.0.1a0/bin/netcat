#!/usr/bin/env python3
"""Python netcat implementation."""

import argparse
import os
import re
import socket
import sys
import threading
from Crypto.Cipher import AES
import select
import socket
import sys
import argparse
import base64
from Crypto.Random import get_random_bytes
from Crypto.Protocol.KDF import PBKDF2
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Util.Padding import unpad
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import dh
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.primitives.serialization import *
import socketserver
import sys
import binascii as ba

BUFF_SIZE=4096


# -------------------------------------------------------------------------------------------------
# GLOBALS
# -------------------------------------------------------------------------------------------------

# In case the server is running in UDP mode
# it must wait for the client to connect in order
# to retrieve its addr and port in order to be able
# to send data back to it.
UDP_CLIENT_ADDR = None
UDP_CLIENT_PORT = None

NAME = os.path.basename(sys.argv[0])
VERSION = "0.1.0-alpha"

# -------------------------------------------------------------------------------------------------
# HELPER FUNCTIONS
# -------------------------------------------------------------------------------------------------


def b2str(data):
    """Convert bytes into string type."""
    try:
        return data.decode("utf-8")
    except UnicodeDecodeError:
        pass
    try:
        return data.decode("utf-8-sig")
    except UnicodeDecodeError:
        pass
    try:
        return data.decode("ascii")
    except UnicodeDecodeError:
        return data.decode("latin-1")


def log(msg, level, verbose):
    """Log messages to stderr."""
    if level == "error":
        print("%s" % (msg), file=sys.stderr)
    elif level == "warning":
        print("%s" % (msg), file=sys.stderr)
    elif level == "info" and verbose > 0:
        print("%s" % (msg), file=sys.stderr)
    elif level == "debubg:" and verbose > 1:
        print("%s" % (msg), file=sys.stderr)
    else:
        print("Fatal, wrong logging level: '%s'. Please report this issue", file=sys.stderr)
        sys.exit(1)


# -------------------------------------------------------------------------------------------------
# ENCRYPT DECRYPT FUNCTIONS
# -------------------------------------------------------------------------------------------------
def genKey(password,salt):
        return PBKDF2(password, salt, dkLen=32, count=1000)
        
def encryptData(password, data):
    nonce = get_random_bytes(13)
    salt = get_random_bytes(16)
    cipher = AES.new(genKey(password, salt), AES.MODE_CCM, nonce=nonce, mac_len=8)
    cipher.update(salt)
    ciphered_data, digest = cipher.encrypt_and_digest(data.encode('utf-8'))
    return base64.b64encode(nonce + salt + ciphered_data + digest).decode('utf-8')

def decryptData(password, data):
    data = base64.b64decode(data)
    nonce = data[:13]
    salt = data[13:29]
    ciphered_data = data[29:-8]
    digest = data[-8:]
    cipher = AES.new(genKey(password, salt), AES.MODE_CCM, nonce=nonce, mac_len=8)
    cipher.update(salt)
    original_data = cipher.decrypt_and_verify(ciphered_data, digest).decode('utf-8')
    return original_data

# -------------------------------------------------------------------------------------------------
# CLIENT/SERVER COMMUNICATOIN FUNCTIONS
# -------------------------------------------------------------------------------------------------


def send(s, shared_secret, udp=False, crlf=False, verbose=0):
    """Send one newline terminated line to a connected socket."""
    # In case of sending data back to an udp client we need to wait
    # until the client has first connected and told us its addr/port
    if udp and UDP_CLIENT_ADDR is None and UDP_CLIENT_PORT is None:
        while UDP_CLIENT_ADDR is None and UDP_CLIENT_PORT is None:
            pass
        if verbose > 0:
            print("Client:     %s:%i" % (UDP_CLIENT_ADDR, UDP_CLIENT_PORT), file=sys.stderr)
    # Loop for the thread
    while True:
        # Read user input
        data = input()

        encrypted_data = encryptData(shared_secret,data)
        print(encrypted_data)

        # Ensure to terminate with desired newline
        if isinstance(encrypted_data, bytes):
            encrypted_data = b2str(encrypted_data)
        if crlf:
            encrypted_data += "\r\n"
        else:
            encrypted_data += "\n"

        size = len(encrypted_data)
        encrypted_data = encrypted_data.encode()
        send = 0

        # Loop until all bytes have been send
        while send < size:
            try:
                if udp:
                    send += s.sendto(encrypted_data, (UDP_CLIENT_ADDR, UDP_CLIENT_PORT))
                else:
                    send += s.send(encrypted_data)
            except (OSError, socket.error) as error:
                print("[Send Error] %s" % (error), file=sys.stderr)
                print(s, file=sys.stderr)
                s.close()
                # exit the thread
                return

    # Close connection when thread stops
    s.close()


def receive(s, shared_secret, udp=False, bufsize=1024, verbose=0):
    """Read one newline terminated line from a connected socket."""
    global UDP_CLIENT_ADDR
    global UDP_CLIENT_PORT

    if verbose > 0:
        print("Receiving:  bufsize=%i" % (bufsize), file=sys.stderr)
    # Loop for the thread
    while True:
        data = ""
        size = len(data)

        while True:
            try:
                (byte, addr) = s.recvfrom(bufsize)
                data += b2str(byte)

                # If we're receiving data from a UDP client
                # we can finally set its addr/port in order
                # to send data back to it (see send() function)
                if udp:
                    UDP_CLIENT_ADDR, UDP_CLIENT_PORT = addr

            except socket.error as err:
                print(err, file=sys.stderr)
                print(s, file=sys.stderr)
                s.close()
                sys.exit(1)
            if not data:
                if verbose > 0:
                    print("[Receive Error] Upstream connection is gone", file=sys.stderr)
                s.close()
                # exit the thread
                return
            # Newline terminates the read request
            if data.endswith("\n"):
                break
            # Sometimes a newline is missing at the end
            # If this round has the same data length as previous, we're done
            if size == len(data):
                break
            size = len(data)
        # Remove trailing newlines
        data = data.rstrip("\r\n")
        data = data.rstrip("\n")
        if verbose > 0:
            print("< ", end="", flush=True, file=sys.stderr)
        decrypted_data = decryptData(shared_secret,data)
        print(decrypted_data)

    # Close connection when thread stops
    s.close()


# -------------------------------------------------------------------------------------------------
# CLIENT/SERVER INITIALIZATION FUNCTIONS
# -------------------------------------------------------------------------------------------------

#
# Server/Client (TCP+UDP)
#
def create_socket(udp=False, verbose=0):
    """Create TCP or UDP socket."""
    try:
        if udp:
            if verbose > 0:
                print("Socket:     UDP", file=sys.stderr)
            return socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        else:
            if verbose > 0:
                print("Socket:     TCP", file=sys.stderr)
            return socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error as error:
        print("[Socker Error] %s", (error), file=sys.stderr)
        sys.exit(1)


#
# Server (TCP+UDP)
#
def bind(s, host, port, verbose=0):
    """Bind TCP or UDP socket to host/port."""
    if verbose > 0:
        print("Binding:    %s:%i" % (host, port), file=sys.stderr)
    try:
        s.bind((host, port))
    except (OverflowError, OSError, socket.error) as error:
        print("[Bind Error] %s" % (error), file=sys.stderr)
        print(s, file=sys.stderr)
        s.close()
        sys.exit(1)


#
# Server (TCP only)
#
def listen(s, backlog=1, verbose=0):
    """Make TCP socket listen."""
    try:
        if verbose > 0:
            print("Listening:  backlog=%i" % (backlog), file=sys.stderr)
        s.listen(backlog)
    except socket.error as error:
        print("[Listen Error] %s", (error), file=sys.stderr)
        print(s, file=sys.stderr)
        s.close()
        sys.exit(1)


#
# Server (TCP only)
#
def accept(s, verbose=0):
    """Accept connections on TCP socket."""
    try:
        c, addr = s.accept()
    except (socket.gaierror, socket.error) as error:
        print("[Accept Error] %s", (error), file=sys.stderr)
        print(s, file=sys.stderr)
        s.close()
        sys.exit(1)

    host, port = addr
    if verbose > 0:
        print("Client:     %s:%i" % (host, port), file=sys.stderr)

    return c


#
# Client (TCP+UDP)
#
def resolve(hostname, verbose=0):
    """Resolve hostname to IP addr or return False in case of error."""
    if verbose > 0:
        print("Resolving:  %s" % (hostname), file=sys.stderr)
    try:
        return socket.gethostbyname(hostname)
    except socket.gaierror as error:
        print("[Resolve Error] %s" % (error), file=sys.stderr)
        return False


#
# Client (TCP+UDP)
#
def connect(s, addr, port, verbose=0):
    """Connect to a server via IP addr/port."""
    if verbose > 0:
        print("Connecting: %s:%i" % (addr, port), file=sys.stderr)
    try:
        s.connect((addr, port))
    except socket.error as error:
        print("[Connect Error] %s" % (error), file=sys.stderr)
        print(s, file=sys.stderr)
        s.close()
        sys.exit(1)


# -------------------------------------------------------------------------------------------------
# SHARED SECRET
# -------------------------------------------------------------------------------------------------
def client_get_shared_secret(sock):
    request = b'Hello'
    sock.sendall(request)
    received = sock.recv(3072).strip()
    if received == b'Hey there!':
        request = b'Params?'
        sock.sendall(request)
    else:
        print('Bad response')
        sock.close()
        return None
    
    received = sock.recv(3072).strip()

    dh_params = load_pem_parameters(received, default_backend())
    if isinstance(dh_params, dh.DHParameters):
        client_keypair = dh_params.generate_private_key()
        request = b'Client public key:' + client_keypair.public_key().public_bytes(
        Encoding.PEM, PublicFormat.SubjectPublicKeyInfo)
        sock.sendall(request)
    else:
        print('Bad response')
        sock.close()
        return None

    received = sock.recv(3072).strip()
    if bytearray(received)[0:18] == b'Server public key:':
        server_pubkey = load_pem_public_key(bytes(bytearray(received)[18:]), default_backend())
        if isinstance(server_pubkey, dh.DHPublicKey):
            shared_secret = client_keypair.exchange(server_pubkey)
            return shared_secret

    print('Failed')
    sock.close()
    return None

def load_dh_params():
    '''
    Load DH parameters from a file which is hard coded here for simplicity
    generating DH parameters is a time consuming operation so we rather use 
    generated values in practice several defined primes and generators
    are hard-coded into programs
    '''
    with open('./dh_2048_params.bin', 'rb') as f:
        params = load_pem_parameters(f.read(), default_backend())
    print('Parameters have been read from file, Server is ready for requests ...')
    return params

def generate_dh_prvkey(params):
    '''
    Generate a random private key (and a public key) from DH parameters
    '''
    return params.generate_private_key()
    
def check_client_pubkey(pubkey):
    if isinstance(pubkey, dh.DHPublicKey):
        return True
    else:
        return False

def  Dh_Handler(socket):
        '''
        This function handles the requests and sends proper responses
        '''
        data = socket.recv(3072).strip()
        params = load_dh_params()

        
        if data == b'Hello':
            response = b'Hey there!'
            socket.sendall(response)
        else:
            response = b'I do not understand you, hanging up'
            socket.sendall(response)
            return
        
        data = socket.recv(3072).strip()
        if data == b'Params?':
            dh_params = params
            response = dh_params.parameter_bytes(Encoding.PEM, ParameterFormat.PKCS3)
            socket.sendall(response)
        else:
            response = b'I do not understand you, hanging up'
            socket.sendall(response)
            return

        data = socket.recv(3072).strip()
        if bytearray(data)[0:18] == b'Client public key:':
            client_pubkey = load_pem_public_key(bytes(bytearray(data)[18:]), default_backend())
            if client_pubkey:
                server_keypair = generate_dh_prvkey(params)

                response = b'Server public key:' + server_keypair.public_key().public_bytes(
                    Encoding.PEM, PublicFormat.SubjectPublicKeyInfo)

                shared_secret = server_keypair.exchange(client_pubkey)
                
                socket.sendall(response)
                return (shared_secret)
            else:
                response = b'Invalid client public key, hanging up'
                socket.sendall(response)
                return 

# -------------------------------------------------------------------------------------------------
# CLIENT
# -------------------------------------------------------------------------------------------------


def run_client(host, port, udp=False,bufsize=1024, crlf=False, verbose=0):
    """Connect to host:port and send data."""
    global UDP_CLIENT_ADDR
    global UDP_CLIENT_PORT

    s = create_socket(udp=udp, verbose=verbose)

    addr = resolve(host, verbose=verbose)
    if not addr:
        s.close()
        sys.exit(1)

    if udp:
        UDP_CLIENT_ADDR = addr
        UDP_CLIENT_PORT = port
    else:
        connect(s, addr, port, verbose=verbose)
    
    shared_secret = client_get_shared_secret(s)

    # Start sending and receiving threads
    tr = threading.Thread(
        target=receive, args=(s,shared_secret), kwargs={"udp": udp, "bufsize": bufsize, "verbose": verbose}
    )
    ts = threading.Thread(
        target=send, args=(s,shared_secret), kwargs={"udp": udp, "crlf": crlf, "verbose": verbose}
    )
    # If the main thread kills, this thread will be killed too.
    tr.daemon = True
    ts.daemon = True
    # Start threads
    tr.start()
    ts.start()

    # Do cleanup on the main program
    while True:
        if not tr.is_alive():
            s.close()
            sys.exit(0)
        if not ts.is_alive():
            s.close()
            sys.exit(0)

# -------------------------------------------------------------------------------------------------
# SERVER
# -------------------------------------------------------------------------------------------------


def run_server(host, port, udp=False, backlog=1, bufsize=1024, crlf=False, verbose=0):
    """Start TCP/UDP server on host/port and wait endlessly to sent/receive data."""
    s = create_socket(udp=udp, verbose=verbose)

    bind(s, host, port, verbose=verbose)

    if not udp:
        listen(s, backlog=backlog, verbose=verbose)
        c = accept(s, verbose=verbose)
    else:
        c = s

    shared_secret = Dh_Handler(c)

    # start sending and receiving threads
    tr = threading.Thread(
        target=receive, args=(c,shared_secret), kwargs={"udp": udp, "bufsize": bufsize, "verbose": verbose}
    )
    ts = threading.Thread(
        target=send, args=(c,shared_secret), kwargs={"udp": udp, "crlf": crlf, "verbose": verbose}
    )
    # if the main thread kills, this thread will be killed too.
    tr.daemon = True
    ts.daemon = True
    # start threads
    tr.start()
    ts.start()

    # do cleanup on the main program
    while True:
        if not tr.is_alive():
            c.close()
            s.close()
            sys.exit(0)
        if not ts.is_alive():
            c.close()
            s.close()
            sys.exit(0)

# -------------------------------------------------------------------------------------------------
# TRANSFER FILE FUNCTIONS
# -------------------------------------------------------------------------------------------------

class FileServer():

    def __init__(self, ip='localhost', port=8080, isServerFlag=False):
        self.Socket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.Socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.clientSocket=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.clientSocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.address=(str(ip), int(port))
        self.isServerFlag=isServerFlag
        if self.isServerFlag:
            try:
                self.Socket.bind(self.address)
                print("Starting up socket on %s:%s" % self.address, file=sys.stderr)
                self.Socket.listen(1)
                self.conn,self.addr=self.Socket.accept()
                self.conn.settimeout(3)
                shared_secret = Dh_Handler(self.conn)

            except KeyboardInterrupt:
                print("Quitting process due to keyboard interrupt.", file=sys.stderr)
                sys.exit(0)
            except socket.error:
                print("Socket error. Please try again later.", file=sys.stderr)
                sys.exit(0)
        else:
            try:
                self.clientSocket.connect(self.address)
                shared_secret = client_get_shared_secret(self.clientSocket)
            except ConnectionRefusedError:
                print("Connection failure to server (%s,%s)" %self.address, file=sys.stderr)
                sys.exit(0)
            except socket.error:
                print("Socket error. Please try again later.", file=sys.stderr)
                sys.exit(0)
            else:
                print("Starting up and connected to %s:%s" % self.address, file=sys.stderr)
            self.clientSocket.settimeout(5)
        self.password= shared_secret
        self.recieveList=[]
        self.inputList=[]


    def serverMode(self):
        try:
            try:
                data = self.conn.recv(BUFF_SIZE).decode().strip()
                while data:
                    self.recieveList.append(data)
                    data=self.conn.recv(BUFF_SIZE).decode().strip()
            except socket.timeout:
                if (select.select([sys.stdin], [], [], 0.0)[0]):
                    data = sys.stdin.readline()
                    while data:
                        ciphertext = encryptData(self.password,data)
                        self.conn.send(ciphertext.encode())
                        data = sys.stdin.readline()
                else:
                    self.conn.close()
                    self.Socket.close()

            if len(self.recieveList)!=0:
                print("Processing the received data.", file=sys.stderr)
                try:
                    for i in self.recieveList:
                        if i:
                            plaintext = decryptData(self.password,i)
                            print(plaintext, file=sys.stdout, end='')
                        else:
                            pass
                except:
                    print("An error in decryption or MAC verification / decryption has occurred",file=sys.stderr)
                print("Process complete.",file=sys.stderr)
        except socket.error:
            print("Closing connection due to termination on remote side.", file=sys.stderr)
            sys.exit(0)
        except KeyboardInterrupt:
            print("Quitting process due to keyboard interrupt.", file=sys.stderr)
            sys.exit(0)

    def clientMode(self):
        try:
            if (select.select([sys.stdin], [], [], 0.0)[0]):
                data=sys.stdin.readline()
                while data:
                    ciphertext=encryptData(self.password,data)
                    self.clientSocket.send(ciphertext.encode())
                    data=sys.stdin.readline()

            try:
                data=self.clientSocket.recv(BUFF_SIZE).decode().strip()
                while data:
                    self.recieveList.append(data)
                    data=self.clientSocket.recv(BUFF_SIZE).decode().strip()
            except socket.timeout:
                self.clientSocket.close()


            if len(self.recieveList) != 0:
                print("Processing the received data.", file=sys.stderr)
                try:
                    for i in self.recieveList:
                        if i:
                            plaintext = decryptData(self.password,i)
                            print(plaintext, file=sys.stdout, end='')
                        else:
                            pass
                except:
                    print("An error in decryption or MAC verification / decryption has occurred", file=sys.stderr)
                print("Process complete.", file=sys.stderr)
        except KeyboardInterrupt:
            print("Quitting process due to keyboard interrupt.", file=sys.stderr)
            sys.exit(0)
        except socket.error:
            print("Closing connection due to termination on remote side.", file=sys.stderr)
            sys.exit(0)

# -------------------------------------------------------------------------------------------------
# COMMAND LINE ARGUMENTS
# -------------------------------------------------------------------------------------------------

def get_version():
    """Return version information."""
    return """%(prog)s: Version %(version)s (%(url)s) by %(author)s""" % (
        {
            "prog": NAME,
            "version": VERSION,
            "url": "https://github.com/cytopia/netcat",
            "author": "cytopia",
        }
    )


def _args_check_port(value):
    """Check arguments for invalid port number."""
    min_port = 1
    max_port = 65535
    intvalue = int(value)

    if intvalue < min_port or intvalue > max_port:
        raise argparse.ArgumentTypeError("%s is an invalid port number." % value)
    return intvalue


def _args_check_forwards(value):
    """Check forward argument (-L/-R) for correct pattern."""
    match = re.search(r"(.+):(.+)", value)
    if match is None or len(match.groups()) != 2:
        raise argparse.ArgumentTypeError("%s is not a valid 'addr:port' format." % value)
    _args_check_port(match.group(2))
    return value


def get_args():
    """Retrieve command line arguments."""
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        add_help=False,
        usage="""%(prog)s [-Cnuv] [-e cmd] hostname port -k key
       %(prog)s [-Cnuv] [-e cmd] -l hostname port -k key
       %(prog)s [-Cnuv] -L addr:port [hostname] port
       %(prog)s [-Cnuv] -R addr:port hostname port
       %(prog)s -V, --version
       %(prog)s -h, --help
       %(prog)s -s -sip [hostname] -sp start_port -ep end_port
       %(prog)s -sf hostname port < send_file_name
       %(prog)s -lf hostname port > receive_file_name
       """
        % ({"prog": NAME}),
        description="Netcat implementation in Python with connect, listen and forward mode.",
        epilog="""examples:

  Create bind shell
    %(prog)s -l -e '/bin/bash' 8080

  Create reverse shell
    %(prog)s -e '/bin/bash' example.com 4444

  Local forward: Make localhost port available to another interface
    %(prog)s -L 127.0.0.1:3306 192.168.0.1 3306

  Remote forward: Forward local port to remote server
    %(prog)s -R 127.0.0.1:3306 example.com 4444"""
        % ({"prog": NAME}),
    )

    positional = parser.add_argument_group("positional arguments")
    mode = parser.add_argument_group("mode arguments")
    optional = parser.add_argument_group("optional arguments")
    misc = parser.add_argument_group("misc arguments")

    positional.add_argument(
        "hostname", nargs="?", type=str, help="Address to listen, forward or connect to"
    )
    positional.add_argument(
        "port", nargs="?", type=_args_check_port, help="Port to listen, forward or connect to"
    )

    mode.add_argument(
        "-l",
        "--listen",
        action="store_true",
        help="Listen mode: Enable listen mode for inbound connects",
    )
    mode.add_argument(
        "-L",
        "--local",
        metavar="addr:port",
        type=_args_check_forwards,
        help="""Local forward mode: Specify local <addr>:<port> to which traffic
should be forwarded to.
Netcat will listen locally (specified by hostname and port) and
forward all traffic to the specified value for -L/--local.""",
    )
    mode.add_argument(
        "-R",
        "--remote",
        metavar="addr:port",
        type=_args_check_forwards,
        help="""Remote forward mode: Specify local <addr>:<port> from which traffic
should be forwarded from.
Netcat will connect remotely (specified by hostname and port) and
for ward all traffic from the specified value for -R/--remote.""",
    )
    mode.add_argument(
        "-s",
        "--scan",
        action="store_true",
        help="Scan mode: Perform port scanning",
    )

    mode.add_argument(
        "-sip",
        "--scan-ip",
        type=str,
        help="Specify the IP address to scan",
    )

    mode.add_argument(
        "-sp",
        "--start-port",
        type=_args_check_port,
        help="Specify the starting port number",
    )

    mode.add_argument(
        "-ep",
        "--end-port",
        type=_args_check_port,
        help="Specify the ending port number",
    )
    mode.add_argument(
        "-sf",
        "--send-file",
        action="store_true",
        help="Send file",
    )

    mode.add_argument(
        "-lf",
        "--listen-file",
        action="store_true",
        help="Receive file",
    )

    optional.add_argument(
        '-k',
        '--key', 
        default='Network Security', 
        type=str, 
        help='A key value that will be used to encrypt data'
    )

    optional.add_argument(
        "-e",
        "--exec",
        metavar="cmd",
        type=str,
        help="Execute shell command. Only works with connect or listen mode.",
    )
    optional.add_argument(
        "-C", "--crlf", action="store_true", help="Send CRLF as line-endings (default: LF)",
    )
    optional.add_argument(
        "-n", "--nodns", action="store_true", help="Do not resolve DNS",
    )
    optional.add_argument("-u", "--udp", action="store_true", help="UDP mode")
    optional.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=0,
        help="Be verbose and print info to stderr. Use -vv or -vvv for more verbosity.",
    )
    misc.add_argument("-h", "--help", action="help", help="Show this help message and exit")
    misc.add_argument(
        "-V",
        "--version",
        action="version",
        version=get_version(),
        help="Show version information and exit",
    )
    args = parser.parse_args()

    # Check mutually exclive arguments
    if args.exec is not None and (args.local is not None or args.remote is not None):
        parser.print_usage()
        print(
            "%s: error: -e/--cmd cannot be used together with -L/--local or -R/--remote" % (NAME),
            file=sys.stderr,
        )
        sys.exit(1)
    if args.listen and (args.local is not None or args.remote is not None):
        parser.print_usage()
        print(
            "%s: error: -l/--listen cannot be used together with -L/--local or -R/--remote"
            % (NAME),
            file=sys.stderr,
        )
        sys.exit(1)
    if args.local is not None and args.remote is not None:
        parser.print_usage()
        print(
            "%s: error: -L/--local cannot be used together with -R/--remote" % (NAME),
            file=sys.stderr,
        )
        sys.exit(1)

    if args.scan:
       if args.start_port is None or args.end_port is None or args.scan_ip is None:
           parser.print_usage()
           print(
               "%s: error: the following arguments are required for scan mode: scan_ip,start_port, end_port"
               % (NAME),
               file=sys.stderr,
           )
           sys.exit(1)
    if args.listen_file and (args.hostname is None or args.port is None):
        parser.print_usage()
        print(
            "%s: error: the following arguments are required for listen file mode: hostname, port"
            % (NAME),
            file=sys.stderr,
        )
        sys.exit(1)

    if args.send_file and (args.hostname is None or args.port is None):
        parser.print_usage()
        print(
            "%s: error: the following arguments are required for send file mode: hostname, port"
            % (NAME),
            file=sys.stderr,
        )
        sys.exit(1)
       
    # Required arguments
    if args.hostname is None and (not args.listen and args.local and args.scan is None):
        parser.print_usage()
        print(
            "%s: error: the following arguments are required: hostname" % (NAME), file=sys.stderr,
        )
        sys.exit(1)

    return args

def perform_port_scan(scan_ip, start_port, end_port):
    for port in range(start_port, end_port + 1):
        try:
            # Create a TCP socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)  # Set timeout to 1 second

            # Attempt to connect to the port
            result = sock.connect_ex((scan_ip, port))
            if result == 0:
                print(f"Port {port} is open")

            sock.close()
        except socket.error:
            print(f"Error occurred while scanning port {port}")

# -------------------------------------------------------------------------------------------------
# MAIN ENTRYPOINT
# -------------------------------------------------------------------------------------------------


def main():
    """Start the program."""
    args = get_args()

    listen_backlog = 1
    receive_buffer = 1024
    hostname = args.hostname if args.hostname is not None else "0.0.0.0"

    if args.listen:
        run_server(
            hostname,
            args.port,
            args.udp,
            backlog=listen_backlog,
            bufsize=receive_buffer,
            crlf=args.crlf,
            verbose=args.verbose,
        )
    elif args.scan:
        perform_port_scan(args.scan_ip, args.start_port, args.end_port)
    elif args.send_file and args.hostname is not None and args.port is not None:
        isServerFlag=True
        ip=args.hostname
        port=args.port
        csobj=FileServer(ip, port, isServerFlag)
        csobj.serverMode()
    elif args.listen_file and args.hostname is not None and args.port is not None:
        isServerFlag = False
        ip=args.hostname
        port=args.port
        csobj = FileServer(ip, port, isServerFlag)
        csobj.clientMode()
    else:
        run_client(
            args.hostname,
            args.port,
            args.udp,
            bufsize=receive_buffer,
            crlf=args.crlf,
            verbose=args.verbose,
        )


if __name__ == "__main__":
    # Catch Ctrl+c and exit without error message
    try:
        main()
    except KeyboardInterrupt:
        print()
        sys.exit(1)
